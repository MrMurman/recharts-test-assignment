{"version":3,"sources":["helpers.tsx","constants.ts","components/CustomLegend.tsx","components/CustomGradient.tsx","components/CustomDot.tsx","App.tsx","index.tsx"],"names":["calculateZScore","data","mean","reduce","acc","value","length","standardDeviation","Math","pow","map","item","DATA","name","uv","pv","amt","BASE_COLORS","LINES","CHART_CONTAINER_DIMENSIONS","width","height","topMargin","padding","CustomLegend","_ref","payload","_jsx","className","children","_ref2","index","dataKey","_jsxs","fill","CustomGradient","id","baseColor","accentColor","x1","y1","x2","y2","point","offset","color","abs","concat","stopColor","CustomDot","dotProps","dotType","lineType","scores","val","getDotColor","additionalProps","r","stroke","Dot","App","uvZScores","flatMap","pvZScores","ResponsiveContainer","LineChart","margin","top","accessibilityLayer","CartesianGrid","strokeDasharray","XAxis","left","right","YAxis","Tooltip","Legend","content","Line","type","dot","props","activeDot","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.9e4c958a.chunk.js","sourcesContent":["export const calculateZScore = (data: number[]) => {\n  const mean = data.reduce((acc, value) => acc + value, 0) / data.length;\n\n  const standardDeviation = Math.pow(\n    data.reduce((acc, value) => acc + Math.pow(value - mean, 2), 0) /\n      data.length,\n    0.5\n  );\n\n  const zScoreArray = data.map((item) => (item - mean) / standardDeviation);\n\n  return zScoreArray;\n};\n\nexport const getDotColor = (val: number, baseColor: string) =>\n  Math.abs(val) > 1 ? \"red\" : baseColor;\n","import { TLine } from \"./types\";\n\nexport const DATA = [\n  {\n    name: \"Page A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: \"Page B\",\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: \"Page C\",\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: \"Page D\",\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: \"Page E\",\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: \"Page F\",\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: \"Page G\",\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport const BASE_COLORS: Record<TLine, string> = {\n  uv: \"#82ca9d\",\n  pv: \"#8884d8\",\n};\n\nexport const LINES: TLine[] = [\"uv\", \"pv\"];\n\nexport const LEGEND_SIZE = 14\n\nexport const CHART_CONTAINER_DIMENSIONS = {\n  width: \"100%\",  \n  height: 300,\n  topMargin: 20,\n  padding: 30\n}","import { BASE_COLORS, LEGEND_SIZE } from \"../constants\";\nimport { CustomGradientProps } from \"../types\";\n\nimport \"../styles.css\";\n\nexport const CustomLegend = ({ payload }: CustomGradientProps) => (\n  <div className=\"legend-container\">\n    {payload &&\n      payload.map(({ dataKey }, index) => (\n        <div key={index} className=\"legend-item\">\n          <svg width={LEGEND_SIZE} height={LEGEND_SIZE}>\n            <rect\n              width={LEGEND_SIZE}\n              height={LEGEND_SIZE}\n              fill={BASE_COLORS[dataKey]}\n            />\n          </svg>\n          <span>{dataKey}</span>\n        </div>\n      ))}\n  </div>\n);\n","interface CustomGradientProps {\n  id: string;\n  data: number[];\n  baseColor: string;\n  accentColor?: string;\n}\nexport const CustomGradient = ({\n  id,\n  data,\n  baseColor,\n  accentColor = \"red\",\n}: CustomGradientProps) => (\n  <linearGradient id={id} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n    {data.map((point, index) => {\n      const offset = (index / (data.length - 1)) * 100;\n      const color = Math.abs(point) > 1 ? accentColor : baseColor;\n      return <stop key={index} offset={`${offset}%`} stopColor={color} />;\n    })}\n  </linearGradient>\n);\n","import { getDotColor } from \"../helpers\";\nimport { BASE_COLORS, TLine } from \"../constants\";\nimport { Dot } from \"recharts\";\n\ninterface CustomDotProps {\n  dotProps: any;\n  dotType: \"standard\" | \"active\";\n  lineType: TLine;\n  scores: number[];\n}\n\nexport const CustomDot = ({\n  dotProps,\n  dotType,\n  lineType,\n  scores,\n}: CustomDotProps) => {\n  const color = getDotColor(scores[dotProps.index], BASE_COLORS[lineType]);\n  const additionalProps =\n    dotType === \"active\" ? { r: 8, fill: color } : { stroke: color };\n\n  return <Dot {...dotProps} {...additionalProps} />;\n};\n","import \"./styles.css\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { calculateZScore } from \"./helpers\";\nimport { BASE_COLORS, CHART_CONTAINER_DIMENSIONS, DATA, LINES } from \"./constants\";\nimport { CustomLegend } from \"./components/CustomLegend\";\nimport { CustomGradient } from \"./components/CustomGradient\";\nimport { CustomDot } from \"./components/CustomDot\";\nimport { TLine } from \"./types\";\n\nexport default function App() {\n  const uvZScores = calculateZScore(DATA.flatMap((item) => item.uv));\n  const pvZScores = calculateZScore(DATA.flatMap((item) => item.pv));\n\n  const {width, height, topMargin, padding} = CHART_CONTAINER_DIMENSIONS\n\n  const scores = (lineType: TLine) =>\n    lineType === \"uv\" ? uvZScores : pvZScores;\n\n  return (\n    <ResponsiveContainer width={width} height={height}>\n      <LineChart data={DATA} margin={{ top: topMargin }} accessibilityLayer>\n        {LINES.map((lineType) => (\n          <defs>\n            <CustomGradient\n              key={lineType}\n              id={`${lineType}Gradient`}\n              data={scores(lineType)}\n              baseColor={BASE_COLORS[lineType]}\n            />\n          </defs>\n        ))}\n\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" padding={{ left: padding, right: padding }} />\n        <YAxis />\n        <Tooltip />\n        <Legend content={<CustomLegend />} />\n        {LINES.map((lineType) => (\n          <Line\n            key={lineType}\n            type=\"monotone\"\n            dataKey={lineType}\n            stroke={`url(#${lineType}Gradient)`}\n            dot={(props) => (\n              <CustomDot\n                scores={scores(lineType)}\n                lineType={lineType}\n                dotProps={props}\n                dotType=\"standard\"\n              />\n            )}\n            activeDot={(props: any) => (\n              <CustomDot\n                scores={scores(lineType)}\n                lineType={lineType}\n                dotProps={props}\n                dotType=\"active\"\n              />\n            )}\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}